# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:latest
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  mongodb:
    image: mongo:4.4.6
    platform: linux/amd64
    ports:
      - "27017:27017"

  spark:
    image: bitnami/spark:latest
    platform: linux/amd64
    environment:
      - SPARK_MODE=worker
    volumes:
      - ./spark_job:/opt/spark_job
    entrypoint: bash -c "pip install kafka-python-ng pymongo && spark-submit --conf spark.jars.ivy=/tmp/.ivy2 /opt/spark_job/spark_process.py"

  flask-app:
    build: .
    ports:
      - "5002:5002"
    platform: linux/amd64
    depends_on:
      - kafka
      - mongodb
      - spark

  kafka_producer:
    build: ./kafka_producer
    platform: linux/amd64
    depends_on:
      - kafka


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

